% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slim_lang.R
\name{uniqueMutationsOfType}
\alias{uniqueMutationsOfType}
\alias{Individual$uniqueMutationsOfType}
\alias{.I$uniqueMutationsOfType}
\title{SLiM method uniqueMutationsOfType}
\usage{
uniqueMutationsOfType(mutType)
}
\arguments{
\item{mutType}{An object of type integer or MutationType object. Must be of
length 1 (a singleton). See details for description.}
}
\value{
An object of type Mutation object.
}
\description{
Documentation for SLiM function \code{uniqueMutationsOfType}, which is a method
of the SLiM class \code{Individual}.
}
\details{
Returns an object vector of all the mutations that are of the type
specified by mutType, out of all of the mutations in the individual. Mutations
present in both genomes will occur only once in the result of this method,
and the mutations will be given in sorted order by position, so this method
is similar to sortBy(unique(individual.genomes.mutationsOfType(mutType)),
"position"). It is not identical to that call, only because if multiple
mutations exist at the exact same position, they may be sorted differently
by this method than they would be by sortBy(). If you just need a count of
the matching Mutation objects, rather than a vector of the matches, use -
countOfMutationsOfType(). This method is provided for speed; it is much
faster than the corresponding Eidos code. Indeed, it is faster than just
individual.genomes.mutationsOfType(mutType), and gives uniquing and sorting
on top of that, so it is advantageous unless duplicate entries for homozygous
mutations are actually needed.
}
